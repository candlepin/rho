~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~
   rho - FLOSS tool for discovering RHEL, Linux, and Unix Servers  
~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~

This is README is for rho version 2.0. rho is a tool
for scanning a network, logging into systems using SSH, and retrieving 
information about available Unix and Linux servers. 

This README contains information about installing rho, basic usage, known 
issues, and best practices. For more details information about the available 
command and command options with rho, see the manpage.


*~*~*~*~*~*~
INTRO TO RHO
~*~*~*~*~*~*
rho is an ansible-based network inventory tool. rho scans a user-defined range of
machines and then reports basic information about the operating system and 
hardware about each server. rho simplifies some basic sysadmin tasks, like 
managing licensing renewals and new deployments.

rho only has to be installed on a single central server to scan all of the 
servers on a network or subnet. Ansible uses SSH, which is commonly available for
server, on both the scanning server and the target machines. rho is an 
agent-less discovery tool, much like Ansible so there is no need to install
anything on any server but the one which will run the scans.

The rho tool itself is set up through two configuration items: 

 * auth entries, which contain the username and password or SSH key to access 
   each server

 * profile entries, which contain IP address ranges, and the auth credentials to use.

There can be multiple auth entries in each profile. A profile contains
all the hosts and ranges that are to be tested against the auths.

The rho tool configuration is created using rho itself. There are subcommands 
to create and edit auth and profile items in the configuration. For example:

    rho auth add --name server1auth --username rho-user --sshkeyfile
    /etc/ssh/ssh_host_rsa_key --password

This creates a new auth item named server1auth, which uses the SSH user 
rho-user with a key stored in the key file. The password is input as
a CL prompt.

(The different rho commands are covered more in the "Syntax" section.)

All the information that rho needs is stored in the data folder in
the installed directory. All the auths are stored in the 'credentials'
file. All the profiles are stored in the 'profiles' file. The ansible
playbook is called 'rho_playbook.yml' stored in the installed directory.
The roles created during the scan are stored in the roles folder. These
roles are used by 'rho_playbook.yml' to perform the fact collection.

Running the scan is simple. Just point the rho tool to the profile
to use, the facts to collect and print the results to a CSV output file.
Optional parameters are the number of forks ansible should use and whether
or not to process the profile using '--reset'. A newly created or
freshly edited profile has to be processed using reset so that it creates
an ansible inventory called '<profile name>_hosts' that includes the working
hosts matched with an auth each (the auths are chosen in the order passed in
to the profile add or edit command as will be explained later).

    rho scan --reset --profile big_test --facts data/facts_eg --ansible_forks 100 --reportfile rep.csv

The output is simple CSV format. If 'default' is the argument for --facts,
the csv output contains the following information:
 
     OS,kernel,processor,platform,release name,release version,release
     number,system ID,username,instnum,release,CPU count,CPU vendor,CPU model,
     BIOS vendor,virtual guest/host,virtual type

For example:

     Linux,i686,i386,redhat-release,5Client,5.3.0.3,ID-1000015943,
     jsmith,da3122afdb7edd23,Red Hat Enterprise Linux Client release 5.3 
     (Tikanga),2,GenuineIntel,Intel(R) Core(TM)2 Duo CPU,Award Software, Inc.,host,
     xen


As implied by the report output, rho differentiates between baremetal machines, 
virtual hosts, and virtual guests, and identifies several major virtual types 
(Xen, Qemu, KVM, and VMWare). It can be very important for inventorying machines 
and maintaining software licenses to separate virtual hosts from guests; rho 
returns that information with every scan, by default.


*~*~*~*~*~*~*~*~*~*~*~*~*~
REQUIREMENTS & ASSUMPTIONS
~*~*~*~*~*~*~*~*~*~*~*~*~*
Before installing rho, there are some guidelines about which machine it should 
be installed on:

 * rho is written to run on RHEL or Fedora servers.

 * The machine that rho is installed on must be able to access the machines to 
   be scanned, so it must be on the network and the machines must be running.

 * The target machines must be running SSH.

 * The user account that rho uses to SSH into the machine must have adequate 
   permissions to run commands and read certain files. For example, it *cannot* 
   be a /sbin/nologin or /bin/false shell.

 * The user account rho uses for a machine should have a sh like shell

These python packages are required for the rho install machine to run rho:
 * python
 * gettext
 * json
 * subprocess
 * xmlrpclib
 * ansible.module_utils.basic

The following python packages are required to build rho from source:
 * python-devel
 * python-setuptools


*~*~*~*~*~*~
INSTALLATION
~*~*~*~*~*~*
rho is available for download with the other Fedora EPEL packages at 
http://download.fedora.redhat.com/pub/epel/.

 1. First, make sure that the EPEL repo is enabled for the server:

     rpm -Uvh http://download.fedora.redhat.com/pub/epel/5/i386/epel-release-5-2.noarch.rpm

 2. Then, install the rho packages:

     yum install rho


*~*~*~*~*~*~*~*~*~*~*~
COMMAND SYNTAX & USAGE
~*~*~*~*~*~*~*~*~*~*~*
The basic syntax is:

     rho command subcommand [options]

There are four rho commands:

 * auth, for managing auth entries

 * profile, for managing profile entries

 * scan, for running scans

auth, and profile both have three subcommands:

 * add to create a new entry

 * edit to modify an existing entry

 * clear to remove any or all entries

 * show and list to display one or more entries

The complete list of options for each command and subcommand are listed in the 
rho manpage with other usage examples. The common options are listed with the 
examples in this README.


AUTH ENTRIES
The first step to configuring rho is adding auth credentials to use to connect 
over SSH. Each authentication identity requires its own auth entry.

    rho auth add --name server1creds --username rho-user --sshkeyfile
    /etc/ssh/ssh_host_rsa_key

--password not being passed or passed as empty are considered the same thing.


PROFILES
Then, create the profile to use for the scan. This should include a list of IP 
addresses or ranges, and the auth identity to use.

    rho profile edit --name profile1 --hosts "1.2.3.0 - 1.2.3.255" --auth
    server1creds server2creds

The hosts can be passed in as a file with all the ranges listed in new lines.

SCANNING
The arguments required for a scan are the profile to use, the file path for the report
and the facts to be collected. Optionally we can pass the number of ansible forks.
Finally an important argument is 'reset'. This tells rho that the profile you are
passing in is either new or has been updated with changes in either the hosts or
auths or both and that rho has to process it afresh.

    rho scan --reset --profile myprofile --facts default --reportfile report.csv

Since rho collects the successful host auth mappings from a full scan with reset
the user doesn't have to worry about iterating through multiple auths and hosts
again and again in the same profile as long as the profile hasn't changed.
For purposes of record keeping the host mapping files are always written to whenever
a scan is done using a profile. When profiles are deleted the host auth mappings
corresponding to the profile are renamed with prefix '(DELETED PROFILE)' so that
they are recognizable. Every scan has a time stap in the mappings.

As far as the auths used by the inventory of a particular scan is concerned, it
is important to note that the order of the auths passed into a profile matters!
A profile by definition takes in one ordering of auths and all the hosts in
the profile are tested in that order with the auths before the first auths to
work are picked to run the fact collection. Therefore, it's up to the user
to pass in auths as per the priority they deem fit for a profile. If a non root
auth is better tried first and then the root auth then the user has to pass in the
auths in the order as '--auth <nonroot_1> <nonroot_2> <root_1> <root_2>' etc.


OUTPUT
The important part about a scan is, obviously, the results report. By default, 
this contains a large amount of information about the operating system, 
hardware, and platform.

     cpu.count:number of processors
     cpu.cpu_family:cpu family
     cpu.model_name:cpu model name
     cpu.vendor_id:cpu vendor name
     dmi.bios-vendor:bios vendor name
     error:any errors that are found
     etc-release.etc-release:contents of /etc/release (or equivalent)
     instnum.instnum:installation number
     redhat-release.name:name of package that provides 'redhat-release'
     redhat-release.release:release of package that provides 'redhat-release'
     redhat-release.version:version of package that provides 'redhat-release'
     systemid.system_id:Red Hat Network system id
     systemid.username:Red Hat Network username
     virt.virt:host, guest, or baremetal
     virt.type:type of virtual system
     uname.all:uname -a (all)
     uname.hardware_platform:uname -i (hardware_platform)
     uname.hostname:uname -n (hostname)
     uname.kernel:uname -r (kernel)
     uname.os:uname -s (os)
     uname.processor:uname -p (processor)

The output can then be configured to contain any combination of these fields by using the
--facts argument. The following is the format rho understands for all the facts. Some or all
of these facts can be requested by either as a CLI list i.e. --facts <fact_1> <fact_2> etc
or by passing in a file with a new fact on every line in the format as follows. A value
of 'default' will get all the information listed above.

        Username_uname.x (for facts of the form uname.x)
        VirtWhat_virt.x (for facts of the form virt.x)
        SysId_systemid.x (for facts of the form systemid.x)
        RedhatRelease_redhat-release.x (for facts of the form redhat-release.x)
        Instnum_instnum.x (for facts of the form instnum.x)
        EtcRelease_etc-release.x (for facts of the form etc-release.x)
        Dmi_dmi.x (for facts of the form dmi.x)
        Cpu_cpu.x (for facrs of the form cpu.x)

As hinted at previously, the auths that have been used in a particular scan are
the first valid auths in the list passed in order to the profile. All the valid
auths are of course listed in the host auth mapping file for the profile for that
scan identified by the time stamp.

Following is the results of an example rho scan.

This is the example of the profile called 'big_test' and it's host auth mapping
after the original reset.

This is for the scan performed on Wed Aug 10 23:33:17 2016.

                    Host auth mapping file
******************************************************************************

Wed Aug 10 23:33:17 2016
-------------------------------
192.168.124.153
----------------------
seven, root, ********, empty
eight, t_4, ********, empty


192.168.124.162
----------------------
two, t_2, ********, empty


192.168.124.174
----------------------
one, root, ********, empty
five, root, ********, empty
seven, root, ********, empty


192.168.124.15
----------------------
five, root, ********, empty
seven, root, ********, empty


192.168.121.007
----------------------
six, vagrant, ********, empty


                Example inventory used for this scan:
******************************************************************************

[alpha]
192.168.124.153 ansible_ssh_host=192.168.124.153
192.168.124.162 ansible_ssh_host=192.168.124.162
192.168.124.174 ansible_ssh_host=192.168.124.174
192.168.124.15 ansible_ssh_host=192.168.124.15
192.168.121.007 ansible_ssh_host=192.168.121.007

[five]
192.168.124.15 ansible_ssh_host=192.168.124.15 ansible_ssh_user=root ansible_ssh_pass=thirdpass ansible_ssh_private_key_file=empty


[six]
192.168.121.007 ansible_ssh_host=192.168.121.007 ansible_ssh_user=vagrant ansible_ssh_private_key_file=empty


[one]
192.168.124.174 ansible_ssh_host=192.168.124.174 ansible_ssh_user=root ansible_ssh_pass=firstpass ansible_ssh_private_key_file=empty


[two]
192.168.124.162 ansible_ssh_host=192.168.124.162 ansible_ssh_user=t_2 ansible_ssh_pass=secondpass1 ansible_ssh_private_key_file=empty


[seven]
192.168.124.153 ansible_ssh_host=192.168.124.153 ansible_ssh_user=root ansible_ssh_pass=fourthpass ansible_ssh_private_key_file=empty


*************************************************************************************

The profile used for this scan was

big_test, 192.168.124.[1:40],192.168.121.007,192.168.121.140,192.168.124.153,192.168.124.[150:200], test_first,test_second,test_third,one,two,three,four,five,six,seven,eight

The auths used for this scan were

c54de740-6e03-436f-ab46-901a3a07c271, test_first, root, ********, /home/kbattula/.ssh/id_rsa
ecdda349-f7f3-432f-ac45-84aff1182f98, test_second, root, ********, /home/kbattula/.ssh/id_rsa
e2b70d19-6c96-426b-962a-c773c0eb9125, test_third, root, ********, /home/kbattula/.ssh/id_rsa
d2aa29b5-4f90-4da6-adfc-1163d7007568, one, root, ********, empty
de7ae67b-8880-4b3a-ab3d-365d58da0d69, two, t_2, ********, empty
55bc67f3-fc64-427c-8b2f-7aa7ceccf59b, three, blippy, ********, empty
af05cdce-08f7-4e7f-b375-981ad1935c2e, four, foobar, ********, empty
dc759edd-e43f-4a62-9459-eda6bc0efff8, five, root, ********, empty
dc72b6e1-f486-4b15-8e25-8c3b2ab395b8, six, vagrant, ********, empty
f37ce000-dc2a-4a3d-9988-e21caa8cec2b, seven, root, ********, empty
b11e014b-da64-4c0d-a45d-c81d12419882, eight, t_4, ********, empty

Where the first column is the unique id that rho assigns to every auth.

This is the order in which the profile was associated to auths:

test_first test_second test_third one two three four five six seven eight

The facts collected were
Username_uname.hostname
Username_uname.os
Date_date.date
Cpu_cpu.bogomips
Cpu_cpu.vendor_id
RedhatRelease_redhat-release.name
RedhatPackages_redhat-packages.num_installed_packages

The output was

cpu.bogomips,cpu.vendor_id,date.date,redhat-packages.num_installed_packages,redhat-release.name,uname.hostname,uname.os
5587.07,GenuineIntel,Thu Aug 11 14:55:46 EDT 2016,324,redhat-release-server,localhost.localdomain,Linux
5587.07,GenuineIntel,Thu Aug 11 14:55:46 EDT 2016,328,redhat-release-server,localhost.localdomain,Linux
5587.07,GenuineIntel,Thu Aug 11 14:55:46 EDT 2016,324,redhat-release-server,localhost.localdomain,Linux
5587.07,GenuineIntel,Thu Aug 11 14:55:46 EDT 2016,324,redhat-release-server,localhost.localdomain,Linux
5587.07,GenuineIntel,Thu Aug 11 14:55:46 EDT 2016,379,centos-release,rho-dev.example.com,Linux


*************************************************************************************

*~*~*~*~*~*~
KNOWN ISSUES
~*~*~*~*~*~*
To report bugs for rho, select the Fedora product and rho component in the Red 
Hat bug tracking system, http://bugzilla.redhat.com.

version 2.0

*~*~*~*~*~*~*~*
VERSION HISTORY
~*~*~*~*~*~*~*~
version 2.0
 * Made rho rely on Ansible for all of it's scanning needs.

version 0.2
 * Added ability to detect and correctly categorize virtual hosts and guests.

version 0.1 (Initial release)
 * Runs scans for RHEL systems, upstream (Fedora) systems, downstream (CentOS) 
systems, and other flavors of Linux and Unix.
 * Introduces auth and profile configuration for setting up rho.
 * Scans user-defined IP address ranges and hostnames for an entire network or 
subnet.
 * Allows existing JSON configuration files to be loaded for configuration.
 * Outputs results to CSV file reports.
 * Allows the report format to be customized.

*~*~*~*
CONTACT
~*~*~*~
rho was written by Adrian Likins <alikins@redhat.com>, Devan Goodwin 
<dgoodwin@redhat.com>, and Jesus M. Rodriguez <jesusr@redhat.com>.

rho 2.0 was written by Karthik Harihar Reddy Battula <karthikhhr@gmail.com>

COPYRIGHT & LICENSE
Copyright 2009-2016, Red Hat, Inc.

rho is released under the GNU Public License version 2.

(README v2.0, last updated August 11, 2016.)
